#!/bin/bash
# exec_task -- bash script to run a rake task, ensuring a second instance cannot be run concurrently

# adapted from:
# * http://www.davidpashley.com/articles/writing-robust-shell-scripts.html
# * http://braydon.com/blog/2009/5/23/how-can-i-tell-if-my-bash-script-is-already-running
# * http://www.labbookpages.co.uk/software/bashTips.html
# * http://stackoverflow.com/questions/185451/quick-and-dirty-way-to-ensure-only-one-instance-of-a-shell-script-is-running-at-a
# * http://mywiki.wooledge.org/BashFAQ/045

# die if a variable isn't set
set -u
# die on errors
set -e
# do not allow redirection to overwrite a file to prevent a race condition
#set -C

if [ $# -ne 2 ]; then
  echo "USAGE: $0 TASK_NAME LOG_FILE"
  exit 99
fi
  
task="$1"
logfile="$2"
scriptdir="`dirname $0`"
projdir="`cd $scriptdir/..; pwd`"
pidfile="$projdir/tmp/pids/`echo $task | tr : _`.pid"

#if [ -f "$pidfile" ]; then
#  # the file is there, but that doesn't necessarily mean the process is running
#  # so we need to make sure of that
#  pid=`head -n 1 "$pidfile"`
#  if kill -0 "$pid" &>/dev/null; then
#    echo "exec_task: Task '$task' is already running as $pid"
#    exit 1
#  else
#    rm "$pidfile"
#  fi
#fi

# create the lockfile or die if it already exists
if ! (set -C; >"$pidfile") &>/dev/null; then
  echo "exec_task: Task '$task' is already running"
  exit 1
fi

# ensure pidfile is removed on any sort of exit
trap 'rm -f "$pidfile"; exit' INT TERM EXIT

cd $projdir
mkdir -p "`dirname "$logfile"`"
/usr/local/bin/rake "$task" --trace RAILS_ENV=bg 1>>"$logfile" 2>&1
rm -f $pidfile

# reset signals
trap - INT TERM EXIT
